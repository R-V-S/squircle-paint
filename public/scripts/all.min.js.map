{"version":3,"sources":["main.js"],"names":["Color","init","colorValue","this","element","document","createElement","className","onclick","e","color","target","style","backgroundColor","setColor","console","log","setMeta","meta","createRandom","args","colorMode","toLowerCase","error","Array","isArray","baseValues","ranges","channelValues","i","parseInt","Math","random","newColorValue","Palette","columns","swatches","appendTo","id","parent","getElementById","appendChild","clear","lastChild","removeChild","column","swatchesInThisColumn","j","swatch","Object","create","push","render","fragment","createDocumentFragment","length","columnElement","swatchElement","palette"],"mappings":"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","file":"all.min.js","sourcesContent":["(function() {\n  'use strict'\n\n  //cityscape by the water palette: 9ac, ac9, 89a, bce, abd\n  const Color = {\n    init: function(colorValue) {\n      this.element = document.createElement('div');\n      this.element.className = 'palette-color';\n      this.element.onclick = function(e) {\n        color = e.target.style.backgroundColor;\n      }\n      if (colorValue) {\n        this.setColor(colorValue);\n      } else {\n        this.colorValue = '#abd';\n      }\n    },\n    setColor: function(colorValue) {\n      this.colorValue = colorValue;\n      console.log(colorValue);\n      this.element.style.backgroundColor = colorValue;\n    },\n    setMeta: function(meta) {\n      this.meta = meta;\n    },\n    // createRandom( { baseValues: Array, ranges: Array, colorMode: String } )\n    createRandom: function(args) {\n      // colorMode should be either rgb or hsl\n      if (args.colorMode.toLowerCase() !== 'rgb' && args.colorMode.toLowerCase() !== 'hsl') {\n        console.error('SquirclePaint.Color.createRandom: Invalid colorMode of '+args.colorMode+' given. Should be string that equals either \\'rgb\\' or \\'hsl\\'.')\n        return false;\n      }\n      // args.baseValues and args.ranges are expected to be arrays with 3 items, which\n      // allows for random colors to be pre-biased. If single values are returned,\n      // convert them into arrays.\n      if ( !Array.isArray(args.baseValues) ) {\n        args.baseValues = [args.baseValues, args.baseValues, args.baseValues];\n      }\n      if ( !Array.isArray(args.ranges) ) {\n        args.ranges = [args.ranges, args.ranges, args.ranges];\n      }\n      // channelValues are either [h, s, v] or [r, g, b] depending on colorMode\n      var channelValues = []\n      for (var i=0; i<3; i++) {\n        channelValues[i] = parseInt(args.baseValues[i] + Math.random() * args.ranges[i]);\n      }\n      var newColorValue;\n      switch (args.colorMode) {\n        case 'rgb':\n          newColorValue = args.colorMode + '(' + channelValues[0] + ',' + channelValues[1] + ',' + channelValues[2] + ')';\n          break;\n        case 'hsl':\n          newColorValue = args.colorMode + '(' + channelValues[0] + ',' + channelValues[1] + '%,' + channelValues[2] + '%)';\n          break;\n      }\n\n      this.setColor(newColorValue)\n    }\n  }\n\n  var Palette = {\n    init: function() {\n      this.columns = [];\n      this.swatches = [];\n      this.element = document.createElement('div');\n      this.element.className = 'palette';\n    },\n    appendTo: function(id) {\n      var parent = document.getElementById(id);\n      if (parent) {\n        parent.appendChild(this.element);\n      } else {\n        console.error('SquirclePaint.Palette.appendTo: parent element with ID of '+id+' not found.');\n        return false;\n      }\n    },\n    clear: function() {\n      this.columns = [];\n      this.swatches = [];\n      while (this.element.lastChild) {\n        this.element.removeChild(lastChild);\n      }\n    },\n    createRandom: function(args) {\n      this.clear();\n      if (typeof args !== 'object') {\n        args = {};\n      }\n      if (!args.columns) {\n        args.columns = 5;\n      }\n      if (!args.baseValues) {\n        args.baseValues = [100,50,50];\n      }\n      if (!args.ranges) {\n        args.ranges = [100,50,50];\n      }\n      for (var i = 0; i < args.columns; i++) {\n        var column = [];\n        var swatchesInThisColumn = parseInt( Math.random() * 8 );\n        for (var j = 0; j < swatchesInThisColumn; j++) {\n          var swatch = Object.create(Color);\n          swatch.init();\n          swatch.createRandom({\n            'colorMode': 'hsl',\n            'baseValues': args.baseValues,\n            'ranges': args.ranges\n          });\n          console.log(swatch);\n          swatch.setMeta( {'column': j} );\n          this.swatches.push(swatch);\n          column.push(swatch);\n        }\n        this.columns.push(column);\n      }\n      this.render();\n    },\n    render: function() {\n      var fragment = document.createDocumentFragment();\n      for (var i = 0; i < this.columns.length; i++) {\n        var columnElement = document.createElement('div');\n        columnElement.className = 'palette-column';\n        for (var j = 0; j < this.columns[i].length; j++) {\n          var swatchElement = this.columns[i][j].element;\n          console.log(swatchElement);\n          columnElement.appendChild(swatchElement);\n        }\n        console.log(columnElement);\n        fragment.appendChild(columnElement);\n      }\n      console.log(fragment);\n      this.element.appendChild(fragment);\n    }\n  }\n\n  var palette = Object.create(Palette);\n  palette.init();\n  palette.createRandom();\n  palette.appendTo('div-canvas')\n\n  /*\n  var divCanvas = document.getElementById('div-canvas');\n  var color = '#abd';\n  divCanvas.appendChild(palette);\n  var mouseDown = false;\n  divCanvas.onmousedown = function(e){\n    console.log('down')\n    mouseDown = true;\n  }\n  divCanvas.onmouseup = function(){\n    mouseDown = false;\n  }\n  divCanvas.onmousemove = function(e){\n    if(mouseDown){\n      var point = document.createElement('div');\n      point.className = 'point';\n      point.style.left = e.pageX+'px';\n      point.style.top =  e.pageY+'px';\n      point.style.width = (Math.random()*5*5) + 'px';\n      point.style.height = (Math.random()*5*5) + 'px';\n      point.style.background = color;\n      point.style.boxShadow = '0 0 3px '+color;\n      divCanvas.appendChild(point)\n    }\n  }\n  */\n})()\n"],"sourceRoot":"/source/"}